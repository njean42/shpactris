[gd_scene load_steps=8 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D


const SERVER_IP = '127.0.0.1'
var PORT = OS.get_environment('PORT')

const BTJOIN = preload('res://scenes/menus/bt-join.tscn')

onready var output = $'vbox/output'
onready var games = $'vbox/center-games/games'

var joining = false

var is_server = OS.get_environment('SERVER') == 'true'
var server_time_waiting = 0
const MAX_SERVER_TIME_WAITING = 30  # max time waiting for first connection, before quitting


func _ready():
	clear_output()
	
	get_tree().connect(\"network_peer_connected\",self,'_on_network_peer_connected')
	get_tree().connect(\"network_peer_disconnected\",self,'_on_network_peer_disconnected')
	get_tree().connect(\"server_disconnected\",self,'_on_server_disconnected')
	get_tree().connect(\"connected_to_server\",self,'_on_connected_to_server')
	get_tree().connect(\"connection_failed\",self,'_on_connection_failed')
	
	# server
	set_process(false)
	if is_server:
		set_process(true)
		if not PORT:
			prints('undefined PORT environment variable')
			get_tree().quit(1)
		
		var peer = NetworkedMultiplayerENet.new()
		peer.create_server(int(PORT))
		peer.set_bind_ip(SERVER_IP)
		get_tree().set_network_peer(peer)
		prints('server created - listening on',PORT)
		return
	
	# client + direct connection (testing)
	if lobby.TESTING:
		if not PORT:
			prints('undefined PORT environment variable')
			get_tree().quit(1)
		
		join('127.0.0.1',PORT)
		return
	
	# regular client
	refresh_game_list()


func _on_network_peer_connected(peer_id):
	lobby.clients.append(peer_id)
	
	if get_tree().get_network_unique_id() == 1:
		prints('peer connected => ',lobby.clients)
		
		if lobby.clients.size() > 2:
			# already two players in the game, can't add more
			prints('already two players')
			rpc_id(peer_id,\"could_not_join\",lobby.SERVER_PORT)
			get_tree().network_peer.disconnect_peer(peer_id)
		else:
			rpc_id(peer_id,\"you_joined\",lobby.SERVER_PORT)


func _on_network_peer_disconnected(peer_id):
	lobby.clients.erase(peer_id)
	lobby.clients_ready.erase(peer_id)
	
	if get_tree().get_network_unique_id() == 1:
		prints('peer disconnected =>',lobby.clients)
		if lobby.clients.size() == 0:
			get_tree().quit()


func _on_server_disconnected():
	prints(get_tree().get_network_unique_id(),'server disconnected, quitting')
	get_tree().network_peer = null
	get_tree().quit() # TODO: if not playing, display error and return somewhere


func _on_connected_to_server():
	pass


func _on_connection_failed():
	prints('connection failed')
	get_tree().network_peer = null


func join(server_ip, port, fake_join=false):
	joining = not fake_join
	
	var peer = NetworkedMultiplayerENet.new()
	peer.create_client(server_ip, int(port))
	# peer.create_client() will connect even if the server isn't there
	#Â Wait a few seconds for could_not_join or you_joined, otherwise disconnect
	$\"join-timeout\".stop()
	if $\"join-timeout\".is_connected(\"timeout\",self,'could_not_join'):
		$\"join-timeout\".disconnect(\"timeout\",self,'could_not_join')
	$\"join-timeout\".connect(\"timeout\",self,'could_not_join',[port])
	$\"join-timeout\".start()
	
	get_tree().set_network_peer(peer)
	
	if joining:
		clear_game_buttons()
		add_lobby_output(\"Waiting for server...\")


func fake_join(server_ip, port):  # just check whether a game is full 
	join(server_ip,port,true)


puppet func could_not_join(port):
	$\"join-timeout\".stop()
	get_tree().network_peer = null
	
	if joining:
		clear_output()
		add_lobby_output('Could not join game')
		refresh_game_list()
	else:  # I was just checking if that game was full
		set_btjoin(port,'BUSY')
		check_games_avail()


puppet func you_joined(port):
	$\"join-timeout\".stop()
	if not joining:  # was just a test, disconnect
		get_tree().network_peer = null
		set_btjoin(port,'WAITING')
		check_games_avail()
	else:
		add_lobby_output(\"Joined game, click ready when you are\")
		find_node('bt-ready').visible = true
		rpc(\"player_has_joined\")


remote func player_has_joined():
	add_lobby_output(\"Another player joined!\")


remote func player_ready(peer_id):
	if not (peer_id in lobby.clients):  # should not happen
		prints(peer_id,'not in',lobby.clients,'...')
		return
	
	if not(peer_id in lobby.clients_ready):
		prints(peer_id,'is now ready')
		lobby.clients_ready.append(peer_id)
	
	if lobby.clients_ready.size() == 2:
		lobby.rpc(\"set_clients\",lobby.clients)
		lobby.set_clients(lobby.clients)
		rpc('start_game')


remotesync func start_game():
	get_tree().change_scene(\"res://scenes/world.tscn\")


func _process(delta):
	server_time_waiting += delta
	if server_time_waiting > MAX_SERVER_TIME_WAITING and lobby.clients.size() == 0:
		prints('Waiting long enough for players, quitting')
		get_tree().quit()


func refresh_game_list():
	clear_game_buttons()
	
	var http_request = HTTPRequest.new()
	add_child(http_request)
	http_request.connect(\"request_completed\", self, \"_on_serverinfo_completed\")
	var error = http_request.request(\"http://shpactris/server.php?info\")
	if error != OK:
		add_lobby_output(\"Server not available\")


func _on_serverinfo_completed(result, response_code, headers, body):
	# TODO: check responde_code = 200
	
	var json = JSON.parse(body.get_string_from_utf8())
	# TODO: check json parsing
	json = json.result
	
	# TODO: check that global.VERSION == json.GAME_VERSION
	
	add_lobby_output(\"Select a game to join, or create one\")
	
	for status in ['UNCERTAIN','FREE','BUSY']:
		for port in json.AVAILABLE_SLOTS[status]:
			var bt = BTJOIN.instance()
			bt.set_server(json.SERVER_IP,port)
			bt.switch_status(status)
			games.add_child(bt)
			if status == 'FREE':
				break  # only one 'create game' button
			
	
	check_games_avail()


func check_games_avail():
	for bt in games.get_children():
		if bt.status == 'UNCERTAIN':
			# check whether the game is already full
			fake_join(bt.server_ip,bt.server_port)
			break # only one check at a time


func _on_creategame_completed(result, response_code, headers, body):
	# TODO: check responde_code = 200
	
	var json = JSON.parse(body.get_string_from_utf8())
	# TODO: check json parsing
	json = json.result
	
	add_lobby_output(\"Created game room - %s\" % lobby.GAME_NAMES[str(json.game.port)])
	
	join(json.game.ip,json.game.port)


func _on_btready_pressed():
	if get_tree().get_network_peer() == null:
		add_lobby_output(\"Join a game first\")
		return
	
	find_node('bt-ready').visible = false
	add_lobby_output(\"Waiting for another player\")
	
	clear_game_buttons()
	rpc_id(1,\"player_ready\",get_tree().get_network_unique_id())


func _on_btrefresh_pressed():
	get_tree().network_peer = null
	clear_output()
	find_node('bt-ready').visible = false
	refresh_game_list()


func _on_btleave_pressed():
	get_tree().network_peer = null  # disconnect, should be visible by server
	get_tree().change_scene(\"res://scenes/menus/main-menu.tscn\")


func clear_game_buttons():
	# clear join/create buttons
	for bt in games.get_children():
		bt.queue_free()


func set_btjoin(port,status):
	for bt in games.get_children():
		if bt.server_port == port:
			bt.switch_status(status)


func clear_output():
	output.text = \"\"


func add_lobby_output(msg):
	output.text += msg + \"\\n\"
"

[sub_resource type="DynamicFontData" id=2]
font_path = "res://assets/DejaVuSans-Bold.ttf"

[sub_resource type="DynamicFont" id=3]
font_data = SubResource( 2 )

[sub_resource type="DynamicFontData" id=4]
font_path = "res://assets/DejaVuSans-Bold.ttf"

[sub_resource type="DynamicFont" id=5]
font_data = SubResource( 4 )

[sub_resource type="DynamicFontData" id=6]
font_path = "res://assets/DejaVuSans-Bold.ttf"

[sub_resource type="DynamicFont" id=7]
font_data = SubResource( 6 )

[node name="lobby-scene" type="Node2D"]
script = SubResource( 1 )

[node name="join-timeout" type="Timer" parent="."]
wait_time = 5.0

[node name="vbox" type="VBoxContainer" parent="."]
margin_right = 40.0
margin_bottom = 40.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="output" type="RichTextLabel" parent="vbox"]
margin_right = 580.0
margin_bottom = 450.0
rect_min_size = Vector2( 580, 450 )
custom_fonts/normal_font = SubResource( 3 )
custom_colors/font_color_selected = Color( 0.741176, 0.764706, 0.780392, 1 )
text = "output"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="center-games" type="CenterContainer" parent="vbox"]
margin_top = 454.0
margin_right = 580.0
margin_bottom = 654.0
rect_min_size = Vector2( 0, 200 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="games" type="VBoxContainer" parent="vbox/center-games"]
margin_left = 290.0
margin_top = 100.0
margin_right = 290.0
margin_bottom = 100.0
grow_horizontal = 2

[node name="center" type="CenterContainer" parent="vbox"]
margin_top = 658.0
margin_right = 580.0
margin_bottom = 683.0

[node name="hbox" type="HBoxContainer" parent="vbox/center"]
margin_left = 166.0
margin_right = 414.0
margin_bottom = 25.0

[node name="bt-ready" type="Button" parent="vbox/center/hbox"]
visible = false
margin_left = -53.0
margin_top = -12.0
margin_right = 52.0
margin_bottom = 13.0
custom_fonts/font = SubResource( 5 )
custom_colors/font_color = Color( 0.152941, 0.682353, 0.376471, 1 )
text = "I'M READY"

[node name="bt-refresh" type="Button" parent="vbox/center/hbox"]
margin_right = 94.0
margin_bottom = 25.0
custom_fonts/font = SubResource( 7 )
custom_colors/font_color = Color( 0.92549, 0.941176, 0.945098, 1 )
text = "REFRESH"

[node name="bt-leave" type="Button" parent="vbox/center/hbox"]
margin_left = 98.0
margin_right = 248.0
margin_bottom = 25.0
custom_fonts/font = SubResource( 7 )
custom_colors/font_color = Color( 0.752941, 0.223529, 0.168627, 1 )
text = "BACK TO MENU"
[connection signal="pressed" from="vbox/center/hbox/bt-ready" to="." method="_on_btready_pressed"]
[connection signal="pressed" from="vbox/center/hbox/bt-refresh" to="." method="_on_btrefresh_pressed"]
[connection signal="pressed" from="vbox/center/hbox/bt-leave" to="." method="_on_btleave_pressed"]
