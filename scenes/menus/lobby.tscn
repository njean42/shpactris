[gd_scene load_steps=12 format=2]

[ext_resource path="res://assets/DejaVuSans-Bold.ttf" type="DynamicFontData" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D


var SERVER_URL = OS.get_environment('SERVER_URL') if OS.has_environment('SERVER_URL') else 'https://shootingpactris.njean.me'
var SERVER_IP = OS.get_environment('SERVER_IP') if OS.has_environment('SERVER_IP') else '127.0.0.1'
var PORT = OS.get_environment('PORT')

const BTJOIN = preload('res://scenes/menus/bt-join.tscn')

onready var output = $'vbox/output'
onready var games = $'vbox/center-games/games'

var joining = false

var is_server = OS.get_environment('SERVER') == 'true'
var server_time_waiting = 0
const MAX_SERVER_TIME_WAITING = 30  # max time waiting for first connection, before quitting


func _ready():
	clear_output()
	
	get_tree().connect(\"network_peer_connected\",self,'_on_network_peer_connected')
	get_tree().connect(\"network_peer_disconnected\",self,'_on_network_peer_disconnected')
	get_tree().connect(\"server_disconnected\",self,'_on_server_disconnected')
	get_tree().connect(\"connected_to_server\",self,'_on_connected_to_server')
	get_tree().connect(\"connection_failed\",self,'_on_connection_failed')
	
	# server
	set_process(false)
	if is_server:
		set_process(true)
		if not PORT:
			prints('undefined PORT environment variable')
			get_tree().quit(1)
		
		var peer = NetworkedMultiplayerENet.new()
		peer.create_server(int(PORT))
		prints('server.bin_ip',SERVER_IP)
		peer.set_bind_ip(SERVER_IP)
		get_tree().set_network_peer(peer)
		prints('server created - listening on',PORT)
		return
	
	# client + direct connection (testing)
	if lobby.TESTING:
		if not PORT:
			prints('undefined PORT environment variable')
			get_tree().quit(1)
		
		join(SERVER_IP,PORT)
		return
	
	# regular client
	var nickname = global.get_user_data('nickname')
	find_node('nickname').text = nickname if nickname != null else ''
	find_node(\"bt-refresh\").grab_focus()
	refresh_game_list()


func _on_network_peer_connected(peer_id):
	lobby.clients.append(peer_id)
	
	if get_tree().get_network_unique_id() == 1:
		prints('peer connected => ',lobby.clients)
		
		if lobby.clients.size() > 2:
			# already two players in the game, can't add more
			prints('already two players')
			rpc_id(peer_id,\"could_not_join\",lobby.SERVER_PORT)
			get_tree().network_peer.disconnect_peer(peer_id)
		else:
			rpc_id(peer_id,\"you_joined\",lobby.SERVER_PORT,lobby.client_nicknames)


func _on_network_peer_disconnected(peer_id):
	lobby.clients.erase(peer_id)
	lobby.clients_ready.erase(peer_id)
	lobby.client_nicknames.erase(peer_id)
	
	if get_tree().get_network_unique_id() == 1:
		prints('peer disconnected =>',lobby.clients)
		if lobby.clients.size() == 0 and OS.get_environment('TESTING') != 'true':
			prints('No more players, quitting')
			get_tree().network_peer = null
			get_tree().quit()
		# will exit after X seconds waiting


func _on_server_disconnected():
	prints(get_tree().get_network_unique_id(),'server disconnected, quitting')
	get_tree().network_peer = null
	clear_output()
	add_lobby_output(\"Server disconnected\")
	refresh_game_list()


func _on_connected_to_server():
	pass


func _on_connection_failed():
	prints('connection failed')
	get_tree().network_peer = null


func join(server_ip, port, fake_join=false):
	joining = not fake_join
	
	var peer = NetworkedMultiplayerENet.new()
	peer.create_client(server_ip, int(port))
	prints('connected to',server_ip,port)
	# peer.create_client() will connect even if the server isn't there
	#Â Wait a few seconds for could_not_join or you_joined, otherwise disconnect
	$\"join-timeout\".stop()
	if $\"join-timeout\".is_connected(\"timeout\",self,'could_not_join'):
		$\"join-timeout\".disconnect(\"timeout\",self,'could_not_join')
	$\"join-timeout\".connect(\"timeout\",self,'could_not_join',[port])
	$\"join-timeout\".start()
	
	get_tree().set_network_peer(peer)
	
	if joining:
		clear_game_buttons()
		add_lobby_output(\"Waiting for server...\")


func fake_join(server_ip, port):  # just check whether a game is full 
	join(server_ip,port,true)


puppet func could_not_join(port):
	$\"join-timeout\".stop()
	get_tree().network_peer = null
	
	if joining:
		clear_output()
		add_lobby_output('Could not join game')
		refresh_game_list()
	else:  # I was just checking if that game was full
		set_btjoin(port,'BUSY')
		check_games_avail()


puppet func you_joined(port,client_nicknames):
	$\"join-timeout\".stop()
	if not joining:  # was just a test, disconnect
		get_tree().network_peer = null
		set_btjoin(port,'WAITING',client_nicknames)
		check_games_avail()
	else:
		add_lobby_output(\"Joined game, click ready when you are\")
		find_node('bt-ready').visible = true
		find_node('bt-ready').grab_focus()
		rpc(\"player_has_joined\",get_tree().get_network_unique_id(),lobby.mynickname,true)


remote func player_has_joined(peer_id,nickname,reply=false):
	if peer_id == 1:
		return
	
	lobby.client_nicknames[peer_id] = nickname
	
	var txt = \"Another player joined\" if reply else \"Playing with\"
	add_lobby_output(\"%s: '%s'\" % [txt,nickname])
	
	if reply and peer_id > 1:
		rpc_id(peer_id,\"player_has_joined\",get_tree().get_network_unique_id(),lobby.mynickname)


remote func player_ready(peer_id):
	if not (peer_id in lobby.clients):  # should not happen
		prints(peer_id,'not in',lobby.clients,'...')
		return
	
	if not(peer_id in lobby.clients_ready):
		prints(peer_id,'is now ready')
		add_lobby_output(\"'%s' is ready!\" % lobby.client_nicknames[peer_id])
		lobby.clients_ready.append(peer_id)
	
	if lobby.i_am_the_game() and lobby.clients_ready.size() == 2:
		lobby.rpc(\"set_clients\",lobby.clients)
		lobby.set_clients(lobby.clients)
		rpc('start_game')


remotesync func start_game():
	if get_tree().get_network_unique_id() == 1:
		get_tree().change_scene(\"res://scenes/world.tscn\")
	else:
		get_tree().change_scene(\"res://scenes/menus/controls.tscn\")


func _process(delta):
	server_time_waiting += delta
	if server_time_waiting > MAX_SERVER_TIME_WAITING and lobby.clients.size() == 0:
		prints('Waiting long enough for players, quitting')
		get_tree().quit()


func refresh_game_list():
	clear_game_buttons()
	
	add_lobby_output(\"Waiting for server...\")
	
	var http_request = HTTPRequest.new()
	add_child(http_request)
	http_request.connect(\"request_completed\", self, \"_on_serverinfo_completed\")
	var error = http_request.request(SERVER_URL+\"/server.php?info\",[],true)
	if error != OK:
		add_lobby_output(\"Server not available\")


func _on_serverinfo_completed(result, response_code, headers, body):
	if response_code != 200:
		add_lobby_output(\"Server is down\")
		return
	
	var json = JSON.parse(body.get_string_from_utf8())
	if json.error != 0:
		add_lobby_output(\"Server doesn't speak my language...\")
		return
	json = json.result
	
	if global.SERVER_COMPATIBILITY != json.SERVER_COMPATIBILITY:
		add_lobby_output(\"Server is incompatible, update your game?\")
		add_lobby_output(\"Server version: '%s'\" % [json.SERVER_COMPATIBILITY])
		add_lobby_output(\"Your version:    '%s'\" % [global.SERVER_COMPATIBILITY])
		return
	
	lobby.min_port = INF
	for status in lobby.game_statuses:
		for slot in json.AVAILABLE_SLOTS[status]:
			if int(slot) < lobby.min_port:
				lobby.min_port = int(slot)
	
	add_lobby_output('Connected to server \"%s\"' % json.DESCRIPTION)
	add_lobby_output('Server handles a maximum of %s simultaneous games' % json.MAX_GAMES)
	add_lobby_output(\"Select a game to join, or create one\")
	
	for status in lobby.game_statuses:
		for port in json.AVAILABLE_SLOTS[status]:
			var bt = BTJOIN.instance()
			bt.set_server(json.SERVER_IP,port)
			bt.switch_status(status)
			games.add_child(bt)
			if status == 'FREE':
				break  # only one 'create game' button
	
	var btjoins = get_tree().get_nodes_in_group(\"bt-join\")
	if btjoins.size() > 0:
		btjoins[0].grab_focus()
	
	check_games_avail()


func check_games_avail():
	for bt in games.get_children():
		if bt.status == 'UNCERTAIN':
			# check whether the game is already full
			fake_join(bt.server_ip,bt.server_port)
			break # only one check at a time


func create_game():
	var http_request = HTTPRequest.new()
	var http_client = HTTPClient.new()
	add_child(http_request)
	
	http_request.connect(\"request_completed\", $'/root/lobby-scene', \"_on_creategame_completed\")
	http_request.request(
		SERVER_URL+'/server.php',
		[\"Content-Type: application/x-www-form-urlencoded\"],
		true,
		HTTPClient.METHOD_POST,
		http_client.query_string_from_dict({'action':'create'})
	)


func _on_creategame_completed(result, response_code, headers, body):
	if response_code != 200:
		clear_output()
		add_lobby_output(\"Could not create room\")
		refresh_game_list()
		return
	
	var json = JSON.parse(body.get_string_from_utf8())
	if json.error != 0:
		add_lobby_output(\"Server doesn't speak my language...\")
		return
	json = json.result
	
	var port = json.game.port
	var game_name = lobby.get_game_name(port)
	add_lobby_output(\"Created game room - %s\" % game_name)
	
	join(json.game.ip,json.game.port)


func _on_btready_pressed():
	if get_tree().get_network_peer() == null:
		add_lobby_output(\"Join a game first\")
		return
	
	find_node('bt-ready').visible = false
	add_lobby_output(\"Waiting for another player\")
	
	clear_game_buttons()
	rpc(\"player_ready\",get_tree().get_network_unique_id())


func _on_btrefresh_pressed():
	get_tree().network_peer = null
	clear_output()
	find_node('bt-ready').visible = false
	refresh_game_list()


func _on_btleave_pressed():
	get_tree().network_peer = null  # disconnect, should be visible by server
	get_tree().change_scene(\"res://scenes/menus/main-menu.tscn\")


func clear_game_buttons():
	# clear join/create buttons
	for bt in games.get_children():
		bt.queue_free()


func set_btjoin(port,status,data={}):
	for bt in games.get_children():
		if bt.server_port == port:
			bt.switch_status(status,data)


func clear_output():
	output.text = \"\"


func add_lobby_output(msg):
	output.text += msg + \"\\n\"


func _on_nickname_text_changed():
	var nickname = find_node('nickname').text.substr(0,16)
	lobby.mynickname = nickname
	
	if find_node('nickname').text != nickname:
		find_node('nickname').text = nickname
	
	global.save_user_data({'nickname': nickname})
"

[sub_resource type="DynamicFont" id=2]
size = 14
font_data = ExtResource( 1 )

[sub_resource type="DynamicFontData" id=9]
font_path = "res://assets/DejaVuSans-Bold.ttf"

[sub_resource type="DynamicFont" id=10]
size = 14
font_data = SubResource( 9 )

[sub_resource type="DynamicFontData" id=3]
font_path = "res://assets/DejaVuSans-Bold.ttf"

[sub_resource type="DynamicFont" id=4]
font_data = SubResource( 3 )

[sub_resource type="DynamicFontData" id=5]
font_path = "res://assets/DejaVuSans-Bold.ttf"

[sub_resource type="DynamicFont" id=6]
font_data = SubResource( 5 )

[sub_resource type="DynamicFontData" id=7]
font_path = "res://assets/DejaVuSans-Bold.ttf"

[sub_resource type="DynamicFont" id=8]
font_data = SubResource( 7 )

[node name="lobby-scene" type="Node2D"]
script = SubResource( 1 )

[node name="join-timeout" type="Timer" parent="."]
wait_time = 5.0

[node name="vbox" type="VBoxContainer" parent="."]
margin_left = 10.0
margin_top = 10.0
margin_right = 590.0
margin_bottom = 710.0
rect_min_size = Vector2( 580, 700 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="game-info" type="Label" parent="vbox"]
margin_right = 580.0
margin_bottom = 96.0
size_flags_horizontal = 3
size_flags_vertical = 3
custom_fonts/font = SubResource( 2 )
text = "There is no in-game chat yet - voice or text.
Speaking with your remote teammate may ease the game though."
align = 1
valign = 1

[node name="center2" type="CenterContainer" parent="vbox"]
margin_top = 100.0
margin_right = 580.0
margin_bottom = 196.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="hbox" type="HBoxContainer" parent="vbox/center2"]
margin_left = 149.0
margin_top = 36.0
margin_right = 431.0
margin_bottom = 60.0

[node name="label" type="Label" parent="vbox/center2/hbox"]
margin_top = 3.0
margin_right = 78.0
margin_bottom = 20.0
custom_fonts/font = SubResource( 10 )
text = "Nickname"

[node name="nickname" type="TextEdit" parent="vbox/center2/hbox"]
margin_left = 82.0
margin_right = 282.0
margin_bottom = 24.0
rect_min_size = Vector2( 200, 24 )
custom_fonts/font = SubResource( 10 )

[node name="output" type="RichTextLabel" parent="vbox"]
margin_top = 200.0
margin_right = 580.0
margin_bottom = 500.0
rect_min_size = Vector2( 0, 300 )
focus_mode = 2
size_flags_vertical = 3
custom_fonts/normal_font = SubResource( 4 )
custom_colors/default_color = Color( 0.741176, 0.764706, 0.780392, 1 )
text = "output"
scroll_following = true
selection_enabled = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="center-games" type="CenterContainer" parent="vbox"]
margin_top = 504.0
margin_right = 580.0
margin_bottom = 600.0
size_flags_horizontal = 3
size_flags_vertical = 3
__meta__ = {
"_edit_use_anchors_": false
}

[node name="games" type="VBoxContainer" parent="vbox/center-games"]
margin_left = 290.0
margin_top = 48.0
margin_right = 290.0
margin_bottom = 48.0
grow_horizontal = 2

[node name="center" type="CenterContainer" parent="vbox"]
margin_top = 604.0
margin_right = 580.0
margin_bottom = 700.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="hbox" type="HBoxContainer" parent="vbox/center"]
margin_left = 166.0
margin_top = 35.0
margin_right = 414.0
margin_bottom = 60.0

[node name="bt-ready" type="Button" parent="vbox/center/hbox"]
visible = false
margin_left = -53.0
margin_top = -12.0
margin_right = 52.0
margin_bottom = 13.0
custom_fonts/font = SubResource( 6 )
custom_colors/font_color = Color( 0.152941, 0.682353, 0.376471, 1 )
custom_colors/font_color_hover = Color( 0.152941, 0.682353, 0.376471, 1 )
text = "I'M READY"

[node name="bt-refresh" type="Button" parent="vbox/center/hbox"]
margin_right = 94.0
margin_bottom = 25.0
custom_fonts/font = SubResource( 8 )
custom_colors/font_color = Color( 0.92549, 0.941176, 0.945098, 1 )
text = "REFRESH"

[node name="bt-leave" type="Button" parent="vbox/center/hbox"]
margin_left = 98.0
margin_right = 248.0
margin_bottom = 25.0
custom_fonts/font = SubResource( 8 )
custom_colors/font_color = Color( 0.752941, 0.223529, 0.168627, 1 )
text = "BACK TO MENU"
[connection signal="text_changed" from="vbox/center2/hbox/nickname" to="." method="_on_nickname_text_changed"]
[connection signal="pressed" from="vbox/center/hbox/bt-ready" to="." method="_on_btready_pressed"]
[connection signal="pressed" from="vbox/center/hbox/bt-refresh" to="." method="_on_btrefresh_pressed"]
[connection signal="pressed" from="vbox/center/hbox/bt-leave" to="." method="_on_btleave_pressed"]
